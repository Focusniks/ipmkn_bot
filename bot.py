import logging
import pathlib
import json
import random
import os
from typing import Any, Coroutine

import mysql.connector
from dotenv import load_dotenv
from mysql.connector import Error
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    filters
)
from datetime import datetime

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
FULL_NAME, CONFIRM_NAME, TUTOR_CODE_INPUT, TUTOR_AUTH, PHONE_NUMBER, MENU = range(6)
EVENT_REGISTRATION, SKS_PHOTO = range(6, 8)
CHOOSE_GROUP, BROADCAST_MESSAGE = range(10, 12)

# –†–æ–ª–∏
ROLE_STUDENT = 'student'
ROLE_TUTOR = 'tutor'
ROLE_ADMIN = 'admin'


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
def get_db_connection():
    try:
        connection = mysql.connector.connect(
            host=os.getenv('DB_HOST'),
            user=os.getenv('DB_USER'),
            password=os.getenv('DB_PASSWORD'),
            database=os.getenv('DB_NAME')
        )
        return connection
    except Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return None


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    connection = get_db_connection()
    if connection:
        cursor = connection.cursor(dictionary=True)
        cursor.execute("SELECT * FROM users WHERE telegram_id = %s", (user_id,))
        user = cursor.fetchone()
        cursor.close()
        connection.close()

        if user:
            # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
            if user['role'] == ROLE_STUDENT:
                await show_main_menu(update, context)
                return MENU
            else:
                await update.message.reply_text(
                    "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Ç—å—é—Ç–æ—Ä –∏–ª–∏ –∞–¥–º–∏–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu."
                )
                return MENU

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –§–ò–û (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤)
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ –Ω–∞—à–µ–º —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–º –±–æ—Ç–µ!\n\n"
        "–î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –§–ò–û, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —É–∑–Ω–∞—Ç—å –≤–∞—Å –ø–æ–±–ª–∏–∂–µ üòä"
    )
    return FULL_NAME

# –í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /code ‚Äî —Ç–æ–ª—å–∫–æ —Ç—å—é—Ç–æ—Ä—ã –∏ –∞–¥–º–∏–Ω—ã
async def code_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:",
        reply_markup=ReplyKeyboardRemove()
    )
    return TUTOR_CODE_INPUT

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –§–ò–û
async def handle_full_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    full_name = update.message.text
    if full_name.isdigit() and len(full_name) == 6:
        return await handle_tutor_auth(update, context)
    context.user_data['full_name'] = full_name

    connection = get_db_connection()
    if connection:
        cursor = connection.cursor(dictionary=True)
        cursor.execute(
            "SELECT * FROM users WHERE full_name = %s",
            (full_name,)
        )
        user = cursor.fetchone()
        cursor.close()
        connection.close()

        if user:
            keyboard = [
                ['‚úÖ –î–∞', '‚ùå –ù–µ—Ç']
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
            await update.message.reply_text(
                f"üîé –ú—ã –Ω–∞—à–ª–∏ –ø–æ—Ö–æ–∂—É—é –∑–∞–ø–∏—Å—å:\n"
                f"üë§ {user['full_name']} (‚Ññ –∑–∞—á—ë—Ç–∫–∏: {user['student_id']})\n\n"
                "–≠—Ç–æ –≤—ã? –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üëá",
                reply_markup=reply_markup
            )
            context.user_data['found_user'] = user
            return CONFIRM_NAME

    await update.message.reply_text(
        "üòî –£–≤—ã, —Ç–∞–∫–æ–≥–æ –§–ò–û –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ.\n"
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!"
    )
    return FULL_NAME


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –§–ò–û
async def confirm_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    choice = update.message.text
    if choice == '‚úÖ –î–∞':
        user_data = context.user_data['found_user']
        connection = get_db_connection()
        if connection:
            cursor = connection.cursor()
            cursor.execute(
                "UPDATE users SET telegram_id = %s, telegram_username = %s WHERE id = %s",
                (update.effective_user.id, update.effective_user.username, user_data['id'])
            )
            connection.commit()
            cursor.close()
            connection.close()

        await update.message.reply_text(
            "üéâ –û—Ç–ª–∏—á–Ω–æ! –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.\n"
            "–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏ üì±",
            reply_markup=ReplyKeyboardRemove()
        )
        return PHONE_NUMBER
    else:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –µ—â—ë —Ä–∞–∑:")
        return FULL_NAME


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async def handle_phone_number(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    phone_number = update.message.text
    context.user_data['phone_number'] = phone_number

    connection = get_db_connection()
    if connection:
        cursor = connection.cursor()
        cursor.execute(
            "UPDATE users SET phone_number = %s WHERE telegram_id = %s",
            (phone_number, update.effective_user.id)
        )
        connection.commit()
        cursor.close()
        connection.close()

    await update.message.reply_text(
        "‚úÖ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –±–æ—Ç–∞ üöÄ"
    )
    return await show_main_menu(update, context)


# –ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    connection = get_db_connection()
    user = None
    tutor_name = "-"  # ‚Üê –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É

    if connection:
        cursor = connection.cursor(dictionary=True)
        cursor.execute("SELECT * FROM users WHERE telegram_id = %s", (user_id,))
        user = cursor.fetchone()
        cursor.close()
        connection.close()

    if not user:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å /start")
        return ConversationHandler.END

    if user['role'] == ROLE_STUDENT:
        tutor_name = "-"
        group = user.get('group_name')
        if group:
            connection = get_db_connection()
            if connection:
                cursor1 = connection.cursor(dictionary=True)
                cursor1.execute(
                    "SELECT tutor_id FROM tutor_groups WHERE group_name = %s", (group,)
                )
                tutor_groups = cursor1.fetchall()
                cursor1.close()  # —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–∫—Ä—ã—Ç—å

                tutor_name = "-"
                if tutor_groups:
                    tutor_group = tutor_groups[0]
                    cursor2 = connection.cursor(dictionary=True)
                    cursor2.execute(
                        "SELECT full_name FROM users WHERE id = %s AND role = 'tutor'", (tutor_group['tutor_id'],)
                    )
                    tutors = cursor2.fetchall()
                    if tutors:
                        tutor_name = tutors[0]['full_name']
                    cursor2.close()
                connection.close()
    menu_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user['full_name']}!\n"
        f"üìö –í–æ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
        f"‚Ä¢ ‚Ññ –∑–∞—á—ë—Ç–∫–∏: {user.get('student_id', '-')}\n"
        f"‚Ä¢ –ì—Ä—É–ø–ø–∞: {user.get('group_name', '-')}\n"
        f"‚Ä¢ –ë–∞–ª–ª—ã: {user.get('points', 0)}\n"
        f"‚Ä¢ –í–∞—à —Ç—å—é—Ç–æ—Ä: {tutor_name}\n\n"
    )

    if user['role'] == ROLE_TUTOR or user['role'] == ROLE_ADMIN:
        connection = get_db_connection()
        if connection:
            cursor = connection.cursor(dictionary=True)
            cursor.execute("SELECT id FROM users WHERE telegram_id = %s", (user_id,))
            tutor = cursor.fetchone()
            groups = []
            if tutor:
                cursor.execute("SELECT group_name FROM tutor_groups WHERE tutor_id = %s", (tutor['id'],))
                groups = [row['group_name'] for row in cursor.fetchall()]
            cursor.close()
            connection.close()
            menu_text = (
                f"üëã –ü—Ä–∏–≤–µ—Ç, {user['full_name']}!\n"
                f"‚Ä¢ –¢—å—é—Ç–æ—Ä –≥—Ä—É–ø–ø(—ã): {', '.join(groups) if groups else '-'}\n"
            )

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–æ–ª–∏
    if user['role'] == ROLE_STUDENT:
        keyboard = [
            ['üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π', '‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏'],
            ['üé´ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –°–ö–°', '‚ùì –ü–æ–º–æ—â—å']
        ]
    elif user['role'] == ROLE_TUTOR:
        keyboard = [
            ['üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π', 'üìä –ë–∞–ª–ª—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤'],
            ['üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']
        ]
    elif user['role'] == ROLE_ADMIN:
        keyboard = [
            ['üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏', 'üìä –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–ª—ã'],
            ['üì¢ –†–∞—Å—Å—ã–ª–∫–∞', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
            ['üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏']
        ]
    else:
        keyboard = [['‚ùì –ü–æ–º–æ—â—å']]

    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(menu_text, reply_markup=reply_markup)
    return MENU

async def tutor_broadcast_entry(update, context):
    user_id = update.effective_user.id
    connection = get_db_connection()
    if connection:
        cursor = connection.cursor(dictionary=True)
        cursor.execute("SELECT id FROM users WHERE telegram_id = %s AND role = 'tutor'", (user_id,))
        tutor = cursor.fetchone()
        if tutor:
            cursor.execute("SELECT group_name FROM tutor_groups WHERE tutor_id = %s", (tutor['id'],))
            groups = [row['group_name'] for row in cursor.fetchall()]
            cursor.close()
            connection.close()
            if groups:
                # –ï—Å–ª–∏ —É —Ç—å—é—Ç–æ—Ä–∞ –æ–¥–Ω–∞ –≥—Ä—É–ø–ø–∞ ‚Äî —Å—Ä–∞–∑—É –≤—ã–±–∏—Ä–∞–µ–º –µ—ë
                context.user_data['broadcast_target'] = groups[0] if len(groups) == 1 else groups
                await update.message.reply_text("üì® –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≥—Ä—É–ø–ø–µ:")
                return BROADCAST_MESSAGE
            else:
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø.")
        else:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ —Ç—å—é—Ç–æ—Ä.")
    return ConversationHandler.END

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async def handle_tutor_code(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    code = update.message.text
    if code == os.getenv('TUTOR_CODE'):
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥:")
        return TUTOR_AUTH
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /start")
        return ConversationHandler.END


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ —Ç—å—é—Ç–æ—Ä–∞/–∞–¥–º–∏–Ω–∞
async def handle_tutor_auth(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    personal_code = update.message.text
    telegram_id = update.effective_user.id
    telegram_username = update.effective_user.username

    connection = get_db_connection()
    if connection:
        cursor = connection.cursor(dictionary=True)
        cursor.execute("SELECT * FROM tutors WHERE code = %s", (personal_code,))
        tutor = cursor.fetchone()

        if tutor and tutor['user_id']:
            cursor.execute("SELECT * FROM users WHERE id = %s", (tutor['user_id'],))
            user = cursor.fetchone()

            if user:
                if user['telegram_id']:
                    await update.message.reply_text("‚ùå –≠—Ç–æ—Ç –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É Telegram –∞–∫–∫–∞—É–Ω—Ç—É.")
                    cursor.close()
                    connection.close()
                    return ConversationHandler.END

                cursor.execute(
                    "UPDATE users SET telegram_id = %s, telegram_username = %s WHERE id = %s",
                    (telegram_id, telegram_username, user['id'])
                )
                connection.commit()
                cursor.close()
                connection.close()

                await update.message.reply_text("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í—ã —Ç–µ–ø–µ—Ä—å —Ç—å—é—Ç–æ—Ä.")
                await show_main_menu(update, context)
                return ConversationHandler.END
            else:
                cursor.close()
                connection.close()
                await update.message.reply_text("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                return ConversationHandler.END
        else:
            cursor.close()
            connection.close()
            await update.message.reply_text("‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é
async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int | None:
    text = update.message.text
    user_id = update.effective_user.id

    connection = get_db_connection()
    if connection:
        cursor = connection.cursor(dictionary=True)
        cursor.execute("SELECT * FROM users WHERE telegram_id = %s", (user_id,))
        user = cursor.fetchone()
        cursor.close()
        connection.close()

    if not user:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å /start")
        return ConversationHandler.END

    if context.user_data.get('user_search'):
        search_term = text
        connection = get_db_connection()
        if connection:
            cursor = connection.cursor(dictionary=True)
            cursor.execute(
                "SELECT * FROM users WHERE full_name LIKE %s",
                (f'%{search_term}%',)
            )
            users = cursor.fetchall()
            cursor.close()
            connection.close()

            if users:
                info_text = "üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
                for u in users:
                    info_text += f"‚Ä¢ ID: {u['id']}, –§–ò–û: {u['full_name']}, –ì—Ä—É–ø–ø–∞: {u['group_name']}, –†–æ–ª—å: {u['role']}\n"
                await update.message.reply_text(info_text)
            else:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        context.user_data['user_search'] = False
        return MENU

    if context.user_data.get('faq_answer_id'):
        question_id = context.user_data['faq_answer_id']
        answer = text
        connection = get_db_connection()
        if connection:
            cursor = connection.cursor(dictionary=True)
            cursor.execute(
                "UPDATE faq_questions SET answer = %s, status = 'answered' WHERE id = %s",
                (answer, question_id)
            )
            cursor.execute("SELECT user_id FROM faq_questions WHERE id = %s", (question_id,))
            question = cursor.fetchone()
            if question:
                cursor.execute("SELECT telegram_id FROM users WHERE telegram_id = %s", (question['user_id'],))
                user = cursor.fetchone()
                if user and user['telegram_id']:
                    await context.bot.send_message(
                        chat_id=user['telegram_id'],
                        text=f"–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n{answer}"
                    )
                else:
                    logger.warning(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç: telegram_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è user_id={question['user_id']}")
        connection.commit()
        cursor.close()
        connection.close()
        await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç—É–¥–µ–Ω—Ç—É.")
        context.user_data['faq_answer_id'] = None
        await show_main_menu(update, context)
        return MENU

    if context.user_data.get('ask_question'):
        question = text
        user_id = update.effective_user.id
        connection = get_db_connection()
        if connection:
            cursor = connection.cursor()
            cursor.execute(
                "INSERT INTO faq_questions (user_id, question) VALUES (%s, %s)",
                (user_id, question)
            )
            question_id = cursor.lastrowid
            connection.commit()
            cursor.close()
            connection.close()
            await update.message.reply_text("‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç—å—é—Ç–æ—Ä–∞–º. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
            await notify_tutors_about_question(context, question_id, question)
        context.user_data['ask_question'] = False
        return MENU

    if context.user_data.get('add_event_title'):
            event_title = text
            context.user_data['event_title'] = event_title
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.09.2025 18:00):")
            context.user_data['add_event_date'] = True
            context.user_data['add_event_title'] = False
            return MENU

    if context.user_data.get('add_event_date'):
        event_date_str = text
        from datetime import datetime
        try:
            event_date = datetime.strptime(event_date_str, "%d.%m.%Y %H:%M")
            event_title = context.user_data.get('event_title')
            attendance_code = f"{random.randint(1000, 9999)}"
            connection = get_db_connection()
            if connection:
                cursor = connection.cursor()
                cursor.execute(
                    "INSERT INTO events (title, event_date, attendance_code) VALUES (%s, %s, %s)",
                    (event_title, event_date, attendance_code)
                )
                event_id = cursor.lastrowid
                connection.commit()
                cursor.close()
                connection.close()
                await update.message.reply_text(
                    f"‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '{event_title}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ {event_date_str}.\nID: {event_id}\n–ö–æ–¥ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏: {attendance_code}"
                )
            else:
                await update.message.reply_text(
                    "‚ö†Ô∏è –û–π! –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
            return MENU
        context.user_data['add_event_date'] = False
        context.user_data['event_title'] = None
        return await manage_events(update, context)

        # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è ---
    if context.user_data.get('edit_event'):
        try:
            event_id = int(text)
            context.user_data['edit_event_id'] = event_id
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
            context.user_data['edit_event_title'] = True
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
        context.user_data['edit_event'] = False
        return MENU

    if context.user_data.get('edit_event_title'):
        new_title = text
        event_id = context.user_data.get('edit_event_id')
        connection = get_db_connection()
        if connection:
            cursor = connection.cursor()
            cursor.execute(
                "UPDATE events SET title = %s WHERE id = %s",
                (new_title, event_id)
            )
            connection.commit()
            cursor.close()
            connection.close()
            await update.message.reply_text(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ '{new_title}'.")
        else:
            await update.message.reply_text(
                "‚ö†Ô∏è –û–π! –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        context.user_data['edit_event_title'] = False
        context.user_data['edit_event_id'] = None
        return await manage_events(update, context)

        # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è ---
    if context.user_data.get('delete_event'):
        try:
            event_id = int(text)
            connection = get_db_connection()
            if connection:
                cursor = connection.cursor()
                cursor.execute("DELETE FROM events WHERE id = %s", (event_id,))
                connection.commit()
                cursor.close()
                connection.close()
                await update.message.reply_text(f"üóëÔ∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å ID {event_id} —É–¥–∞–ª–µ–Ω–æ.")
            else:
                await update.message.reply_text(
                    "‚ö†Ô∏è –û–π! –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
        context.user_data['delete_event'] = False
        return await manage_events(update, context)

    if context.user_data.get('attendance_mark'):
        code = text.strip()
        user_id = update.effective_user.id
        connection = get_db_connection()
        if connection:
            cursor = connection.cursor(dictionary=True)
            cursor.execute("SELECT id FROM events WHERE attendance_code = %s", (code,))
            event = cursor.fetchone()
            if event:
                event_id = event['id']
                cursor.execute("SELECT * FROM event_attendance WHERE event_id = %s AND user_id = %s",
                               (event_id, user_id))
                already = cursor.fetchone()
                if already:
                    await update.message.reply_text("–í—ã —É–∂–µ –æ—Ç–º–µ—á–∞–ª–∏—Å—å –Ω–∞ —ç—Ç–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏.")
                else:
                    cursor.execute("INSERT INTO event_attendance (event_id, user_id) VALUES (%s, %s)",
                                   (event_id, user_id))
                    cursor.execute("UPDATE users SET points = points + 1 WHERE telegram_id = %s", (user_id,))
                    connection.commit()
                    await update.message.reply_text("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å!")
            else:
                await update.message.reply_text("‚ùå –ö–æ–¥ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ–≤–µ—Ä–Ω—ã–π.")
            cursor.close()
            connection.close()
        else:
            await update.message.reply_text(
                "‚ö†Ô∏è –û–π! –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        context.user_data['attendance_mark'] = False
        return MENU

    if context.user_data.get('choose_group'):
        group = update.message.text
        if group == '–í—Å–µ–º –≥—Ä—É–ø–ø–∞–º':
            context.user_data['broadcast_target'] = 'all'
        else:
            context.user_data['broadcast_target'] = group
        context.user_data['choose_group'] = False
        await update.message.reply_text("üì® –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ:")
        return BROADCAST_MESSAGE

    if context.user_data.get('choose_points_group'):
        group = text
        context.user_data['choose_points_group'] = False
        connection = get_db_connection()
        if connection:
            cursor = connection.cursor(dictionary=True)
            # –ü–æ–ª—É—á–∞–µ–º id —Ç—å—é—Ç–æ—Ä–∞ –ø–æ telegram_id
            cursor.execute("SELECT id FROM users WHERE telegram_id = %s AND role = 'tutor'", (user_id,))
            tutor = cursor.fetchone()
            if tutor:
                tutor_id = tutor['id']
                if group == '–í—Å–µ–º –≥—Ä—É–ø–ø–∞–º':
                    cursor.execute(
                        "SELECT full_name, group_name, points FROM users WHERE group_name IN (SELECT group_name FROM tutor_groups WHERE tutor_id = %s) AND role = 'student' ORDER BY group_name, points DESC",
                        (tutor_id,)
                    )
                students = cursor.fetchall()
                cursor.close()
                connection.close()
                if students:
                    points_text = "üìä –ë–∞–ª–ª—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –≥—Ä—É–ø–ø:\n\n"
                    for student in students:
                        points_text += f"‚Ä¢ {student['full_name']} ({student['group_name']}): {student['points']} –±–∞–ª–ª–æ–≤\n"
                    await update.message.reply_text(points_text)
                else:
                    await update.message.reply_text("–í –≤–∞—à–∏—Ö –≥—Ä—É–ø–ø–∞—Ö –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.")
        else:
            connection = get_db_connection()
            if connection:
                cursor = connection.cursor(dictionary=True)
                cursor.execute(
                    "SELECT full_name, points FROM users WHERE group_name = %s AND role = 'student' ORDER BY points DESC",
                    (group,)
                )
                students = cursor.fetchall()
                cursor.close()
                connection.close()
                if students:
                    points_text = f"üìä –ë–∞–ª–ª—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≥—Ä—É–ø–ø—ã {group}:\n\n"
                    for student in students:
                        points_text += f"‚Ä¢ {student['full_name']}: {student['points']} –±–∞–ª–ª–æ–≤\n"
                    await update.message.reply_text(points_text)
                else:
                    await update.message.reply_text("–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.")
        return MENU

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    if user['role'] == ROLE_STUDENT:
        if text == 'üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π':
            await show_events(update, context)
        elif text == 'üìä –ú–æ–∏ –±–∞–ª–ª—ã':
            await show_my_points(update, context)
        elif text == 'üé´ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –°–ö–°':
            await request_sks_photo(update, context)
        elif text == '‚ùì –ü–æ–º–æ—â—å':
            await show_faq(update, context)
        elif text == '‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏':
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
            context.user_data['attendance_mark'] = True
        elif text == '‚úçÔ∏è –ó–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å':
            await ask_question_entry(update, context)
        elif text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            await show_main_menu(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ç—å—é—Ç–æ—Ä–æ–≤
    elif user['role'] == ROLE_TUTOR:
        if text == 'üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π':
            await show_events(update, context)
        elif text == 'üìä –ë–∞–ª–ª—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤':
            await choose_points_group(update, context)
        elif text == 'üì¢ –†–∞—Å—Å—ã–ª–∫–∞':
            return await choose_broadcast_group(update, context)
        elif text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
            await stats_command(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    elif user['role'] == ROLE_ADMIN:
        if text == 'üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏':
            await manage_events(update, context)
        elif text == 'üìä –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–ª—ã':
            await start_set_points(update, context)
        elif text == 'üì¢ –†–∞—Å—Å—ã–ª–∫–∞':
            await choose_broadcast_group(update, context)
        elif text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
            await stats_command(update, context)
        elif text == 'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏':
            await manage_users(update, context)
        elif text == 'üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π':
            await show_users_list(update, context)
        elif text == 'üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è':
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –∏–ª–∏ —á–∞—Å—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞:")
            context.user_data['user_search'] = True
        elif text == 'üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å':
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /setrole <user_id> <role>")
        elif text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            await show_main_menu(update, context)
        elif text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ':
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
            context.user_data['add_event_title'] = True
        elif text == '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ':
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
            context.user_data['edit_event'] = True
        elif text == 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ':
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
            context.user_data['delete_event'] = True

    else:
        await update.message.reply_text(
            "‚ùå –¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç. –ù–∞–ø–∏—à–∏—Ç–µ /menu –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
        )
    return MENU

async def choose_points_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    connection = get_db_connection()
    if connection:
        cursor = connection.cursor(dictionary=True)
        cursor.execute("SELECT id FROM users WHERE telegram_id = %s AND role = 'tutor'", (user_id,))
        tutor = cursor.fetchone()
        if tutor:
            cursor.execute("SELECT group_name FROM tutor_groups WHERE tutor_id = %s", (tutor['id'],))
            groups = [row['group_name'] for row in cursor.fetchall()]
            cursor.close()
            connection.close()

            if groups:
                keyboard = [[group] for group in groups]
                keyboard.append(['–í—Å–µ–º –≥—Ä—É–ø–ø–∞–º'])
                reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
                await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–ª–ª–æ–≤:", reply_markup=reply_markup)
                context.user_data['choose_points_group'] = True
            else:
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫—É—Ä–∏—Ä—É–µ–º—ã—Ö –≥—Ä—É–ø–ø.")
        else:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    return MENU

async def choose_broadcast_group(update, context):
    user_id = update.effective_user.id
    connection = get_db_connection()
    if connection:
        cursor = connection.cursor(dictionary=True)
        cursor.execute("SELECT id, role FROM users WHERE telegram_id = %s", (user_id,))
        user = cursor.fetchone()
        groups = []
        if user:
            if user['role'] == 'tutor':
                cursor.execute("SELECT group_name FROM tutor_groups WHERE tutor_id = %s", (user['id'],))
                groups = [row['group_name'] for row in cursor.fetchall()]
            elif user['role'] == 'admin':
                cursor.execute("SELECT DISTINCT group_name FROM tutor_groups")
                groups = [row['group_name'] for row in cursor.fetchall()]
            cursor.close()
            connection.close()
            if groups:
                keyboard = [[group] for group in groups]
                keyboard.append(['–í—Å–µ–º –≥—Ä—É–ø–ø–∞–º'])
                keyboard.append(['‚Ü©Ô∏è –ù–∞–∑–∞–¥'])  # ‚Üê –¥–æ–±–∞–≤–ª–µ–Ω–æ
                reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
                await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=reply_markup)
                return CHOOSE_GROUP
            else:
                await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        else:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
    return ConversationHandler.END

async def group_chosen(update, context):
    group = update.message.text
    if group == '–í—Å–µ–º –≥—Ä—É–ø–ø–∞–º':
        context.user_data['broadcast_target'] = 'all'
        await update.message.reply_text("üì® –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ:")
        return BROADCAST_MESSAGE
    elif group == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        return await show_main_menu(update, context)
    else:
        context.user_data['broadcast_target'] = group
        await update.message.reply_text("üì® –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ:")
        return BROADCAST_MESSAGE

async def send_broadcast(update, context):
    target = context.user_data.get('broadcast_target')
    message = update.message
    connection = get_db_connection()
    if connection:
        cursor = connection.cursor(dictionary=True)
        if target == 'all':
            cursor.execute("SELECT telegram_id FROM users WHERE role = 'student'")
        else:
            cursor.execute("SELECT telegram_id FROM users WHERE group_name = %s AND role = 'student'", (target,))
        users = cursor.fetchall()
        cursor.close()
        connection.close()
        success = 0
        for user in users:
            try:
                if message.text:
                    await context.bot.send_message(chat_id=user['telegram_id'], text=message.text)
                elif message.photo:
                    await context.bot.send_photo(chat_id=user['telegram_id'], photo=message.photo[-1].file_id,
                                            caption=message.caption)
                elif message.document:
                    await context.bot.send_document(chat_id=user['telegram_id'], document=message.document.file_id,
                                            caption=message.caption)
                success += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        await update.message.reply_text(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success} –∏–∑ {len(users)}")
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    return ConversationHandler.END

async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await show_main_menu(update, context)

async def notify_tutors_about_question(context, question_id, question):
    connection = get_db_connection()
    if connection:
        cursor = connection.cursor(dictionary=True)
        cursor.execute("SELECT telegram_id FROM users WHERE role = 'tutor'")
        tutors = cursor.fetchall()
        cursor.close()
        connection.close()
        for tutor in tutors:
            if tutor['telegram_id']:
                keyboard = [
                    [InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"faq_answer_{question_id}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                try:
                    await context.bot.send_message(
                        chat_id=tutor['telegram_id'],
                        text=f"–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞:\n\n{question}",
                        reply_markup=reply_markup
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ —Ç—å—é—Ç–æ—Ä—É {tutor['telegram_id']}: {e}")

async def show_users_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    connection = get_db_connection()
    if connection:
        cursor = connection.cursor(dictionary=True)
        cursor.execute("SELECT id, full_name, group_name, role FROM users LIMIT 30")
        users = cursor.fetchall()
        cursor.close()
        connection.close()

        if users:
            text = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
            for u in users:
                text += f"‚Ä¢ ID: {u['id']}, –§–ò–û: {u['full_name']}, –ì—Ä—É–ø–ø–∞: {u['group_name']}, –†–æ–ª—å: {u['role']}\n"
            await update.message.reply_text(text)
        else:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

async def show_faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    faq = [
        {"question": "–ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞?", "answer": "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º."},
        {"question": "–ö–∞–∫ —É–∑–Ω–∞—Ç—å —Å–≤–æ–∏ –±–∞–ª–ª—ã?", "answer": "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É `üìä –ú–æ–∏ –±–∞–ª–ª—ã` –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."},
        {"question": "–ö–æ–º—É –ø–∏—Å–∞—Ç—å –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π?", "answer": "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–∞—à–µ–º—É —Ç—å—é—Ç–æ—Ä—É –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."}
    ]
    text = "‚ùì *–ë–∞–∑–∞ –≤–æ–ø—Ä–æ—Å–æ–≤:*\n\n"
    for item in faq:
        text += f"‚Ä¢ *{item['question']}*\n{item['answer']}\n\n"
    keyboard = [
        ['‚úçÔ∏è –ó–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å'],
        ['‚Ü©Ô∏è –ù–∞–∑–∞–¥']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(text, parse_mode="Markdown", reply_markup=reply_markup)

async def ask_question_entry(update, context):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
    context.user_data['ask_question'] = True

async def handle_prof_union(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    connection = get_db_connection()
    if connection:
        cursor = connection.cursor()
        cursor.execute(
            "UPDATE users SET is_prof_union = TRUE WHERE telegram_id = %s",
            (user_id,)
        )
        connection.commit()
        cursor.close()
        connection.close()

        await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –ø—Ä–æ—Ñ—Å–æ—é–∑–µ!")


async def manage_events(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ['‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ'],
        ['üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', '‚Ü©Ô∏è –ù–∞–∑–∞–¥']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏:", reply_markup=reply_markup)


async def start_set_points(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /setpoints <ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–±–∞–ª–ª–æ–≤>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: /setpoints 15 10"
    )


async def manage_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ['üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'],
        ['üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å', '‚Ü©Ô∏è –ù–∞–∑–∞–¥']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:", reply_markup=reply_markup)


# –ü–æ–∫–∞–∑ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
async def show_events(update: Update, context: ContextTypes.DEFAULT_TYPE):
    connection = get_db_connection()
    if connection:
        cursor = connection.cursor(dictionary=True)
        cursor.execute("SELECT * FROM events WHERE event_date >= NOW() ORDER BY event_date LIMIT 10")
        events = cursor.fetchall()
        cursor.close()
        connection.close()

        if events:
            events_text = "üìÖ –í–æ—Ç —Å–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π! \n –ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–∞–ª–ª—ã –∑–∞ —É—á–∞—Å—Ç–∏–µ üèÜ"
            for event in events:
                events_text += f"‚Ä¢ {event['title']} - {event['event_date'].strftime('%d.%m.%Y %H:%M')}\n"

            await update.message.reply_text(events_text)
        else:
            await update.message.reply_text("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç.")


# –ü–æ–∫–∞–∑ –±–∞–ª–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def show_my_points(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    connection = get_db_connection()
    if connection:
        cursor = connection.cursor(dictionary=True)
        cursor.execute("SELECT points FROM users WHERE telegram_id = %s", (user_id,))
        user = cursor.fetchone()
        cursor.close()
        connection.close()

        if user:
            await update.message.reply_text(f"üìä –í–∞—à–∏ –±–∞–ª–ª—ã: {user['points']}")


# –ó–∞–ø—Ä–æ—Å —Ñ–æ—Ç–æ –¥–ª—è –°–ö–°
async def request_sks_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    app_url = "https://drive.google.com/drive/mobile/folders/1zSp_NnUhkJ3ErI19P1bvZLP5naTBjmNh?usp=drive_link"
    await update.message.reply_text(
        f"üì≤ –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n–î–ª—è –∞–Ω–¥—Ä–æ–∏–¥–∞: {app_url}\n"
        f"–î–ª—è IOS: https://apps.apple.com/ru/app/—Å–∫—Å-—Ä—Ñ/id1473711942\n\n"
        "–ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–π–¥–∏—Ç–µ –±—ã—Å—Ç—Ä—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–æ—Ñ–∏–ª—è –°–ö–° –≤–∞—à–µ–º—É —Ç—å—é—Ç–æ—Ä—É.\n"
        "–í–∞–∂–Ω–æ, —á—Ç–æ–±—ã –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ –±—ã–ª–æ –≤–∏–¥–Ω–æ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å, –∞ –∞–≤–∞—Ç–∞—Ä–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞—à–µ–π –Ω–∞—Å—Ç–æ—è—â–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π, —Å –ª–∏—Ü–æ–º."
    )
    return SKS_PHOTO


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –°–ö–°
async def handle_sks_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo = update.message.photo[-1] if update.message.photo else None
    if not photo:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
        return SKS_PHOTO

    user_id = update.effective_user.id
    connection = get_db_connection()
    if not connection:
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return SKS_PHOTO

    try:
        cursor = connection.cursor()
        cursor.execute(
            "INSERT INTO sks_applications (user_id, photo_url, status) VALUES (%s, %s, 'pending')",
            (user_id, photo.file_id)
        )
        connection.commit()
        cursor.close()
        connection.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∑–∞—è–≤–∫–∏ –°–ö–°: {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return SKS_PHOTO

    try:
        await notify_admins_about_sks(update, context, user_id, photo.file_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤: {e}")

    await update.message.reply_text("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!")
    return await show_main_menu(update, context)


# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –°–ö–°
async def notify_admins_about_sks(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int, photo_id: str):
    connection = get_db_connection()
    if connection:
        cursor = connection.cursor(dictionary=True)
        cursor.execute("SELECT * FROM users WHERE role = 'admin'")
        admins = cursor.fetchall()
        cursor.close()
        sent = 0
        for admin in admins:
            if admin['telegram_id']:
                keyboard = [
                    [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"sks_approve_{user_id}"),
                     InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"sks_reject_{user_id}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                try:
                    await context.bot.send_photo(
                        chat_id=admin['telegram_id'],
                        photo=photo_id,
                        caption="–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –°–ö–°",
                        reply_markup=reply_markup
                    )
                    sent += 1
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
        connection.close()
        if sent == 0:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∏ –æ–¥–Ω–æ–º—É –∞–¥–º–∏–Ω—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    connection = get_db_connection()
    if connection:
        cursor = connection.cursor(dictionary=True)
        cursor.execute("SELECT role FROM users WHERE telegram_id = %s", (user_id,))
        user = cursor.fetchone()

        if user and user['role'] in [ROLE_TUTOR, ROLE_ADMIN]:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–æ—Ñ—Å–æ—é–∑—É –∏ –°–ö–°
            cursor.execute("SELECT COUNT(*) as total FROM users")
            total_users = cursor.fetchone()['total']

            cursor.execute("SELECT COUNT(*) as prof FROM users WHERE is_prof_union = TRUE")
            prof_users = cursor.fetchone()['prof']

            cursor.execute("SELECT COUNT(*) as sks FROM users WHERE is_sks = TRUE")
            sks_users = cursor.fetchone()['sks']

            prof_percentage = (prof_users / total_users * 100) if total_users > 0 else 0
            sks_percentage = (sks_users / total_users * 100) if total_users > 0 else 0

            stats_text = (
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                f"‚Ä¢ –í –ø—Ä–æ—Ñ—Å–æ—é–∑–µ: {prof_users} ({prof_percentage:.1f}%)\n"
                f"‚Ä¢ –í –°–ö–°: {sks_users} ({sks_percentage:.1f}%)"
            )

            await update.message.reply_text(stats_text)
        else:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

        cursor.close()
        connection.close()


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–ª–æ–≤
async def set_points_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    connection = get_db_connection()
    if connection:
        cursor = connection.cursor(dictionary=True)
        cursor.execute("SELECT role FROM users WHERE telegram_id = %s", (user_id,))
        user = cursor.fetchone()

        if user and user['role'] == ROLE_ADMIN:
            if len(context.args) < 2:
                await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setpoints <user_id> <points>")
                return

            try:
                target_user_id = int(context.args[0])
                points = int(context.args[1])

                cursor.execute(
                    "UPDATE users SET points = points + %s WHERE id = %s",
                    (points, target_user_id)
                )
                connection.commit()

                await update.message.reply_text(f"‚úÖ –ë–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –∏–∑–º–µ–Ω–µ–Ω—ã –Ω–∞ {points}")
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
        else:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

        cursor.close()
        connection.close()


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
async def info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    connection = get_db_connection()
    if connection:
        cursor = connection.cursor(dictionary=True)
        cursor.execute("SELECT role FROM users WHERE telegram_id = %s", (user_id,))
        user = cursor.fetchone()

        if user and user['role'] == ROLE_ADMIN:
            if not context.args:
                await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /info <–§–ò–û –∏–ª–∏ —á–∞—Å—Ç—å>")
                return

            search_term = ' '.join(context.args)
            cursor.execute(
                "SELECT * FROM users WHERE full_name LIKE %s",
                (f'%{search_term}%',)
            )
            users = cursor.fetchall()

            if users:
                info_text = "üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
                for u in users:
                    info_text += f"‚Ä¢ ID: {u['id']}, –§–ò–û: {u['full_name']}, –ì—Ä—É–ø–ø–∞: {u['group_name']}, –†–æ–ª—å: {u['role']}\n"

                await update.message.reply_text(info_text)
            else:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        else:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

        cursor.close()
        connection.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data.startswith('faq_answer_'):
        question_id = int(query.data.split('_')[2])
        tutor_id = query.from_user.id
        connection = get_db_connection()
        if connection:
            cursor = connection.cursor(dictionary=True)
            cursor.execute("SELECT status FROM faq_questions WHERE id = %s", (question_id,))
            question = cursor.fetchone()
            if question and question['status'] == 'pending':
                cursor.execute(
                    "UPDATE faq_questions SET status = 'in_progress', tutor_id = %s WHERE id = %s",
                    (tutor_id, question_id)
                )
                connection.commit()
                await query.edit_message_text("–í—ã –≤–∑—è–ª–∏ –≤–æ–ø—Ä–æ—Å. –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç—É.")
                context.user_data['faq_answer_id'] = question_id
            else:
                await query.edit_message_text("–í–æ–ø—Ä–æ—Å —É–∂–µ –≤–∑—è—Ç –¥—Ä—É–≥–∏–º —Ç—å—é—Ç–æ—Ä–æ–º.")
            cursor.close()
            connection.close()

    if query.data.startswith('sks_'):
        action, user_id = query.data.split('_')[1], query.data.split('_')[2]

        connection = get_db_connection()
        if connection:
            cursor = connection.cursor()

            if action == 'approve':
                cursor.execute(
                    "UPDATE users SET is_sks = TRUE WHERE id = %s",
                    (user_id,)
                )
                cursor.execute(
                    "UPDATE sks_applications SET status = 'approved' WHERE user_id = %s AND status = 'pending'",
                    (user_id,)
                )
                await query.edit_message_caption(caption="‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞")

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cursor.execute("SELECT telegram_id FROM users WHERE id = %s", (user_id,))
                user = cursor.fetchone()
                if user and user[0]:
                    try:
                        await context.bot.send_message(chat_id=user[0],
                                                       text="‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –°–ö–°. –°–ø–∞—Å–∏–±–æ!")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

            elif action == 'reject':
                cursor.execute(
                    "UPDATE sks_applications SET status = 'rejected' WHERE user_id = %s AND status = 'pending'",
                    (user_id,)
                )
                await query.edit_message_caption(caption="‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cursor.execute("SELECT telegram_id FROM users WHERE id = %s", (user_id,))
                user = cursor.fetchone()
                if user and user[0]:
                    try:
                        await context.bot.send_message(
                            chat_id=user[0],
                            text="‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –°–ö–° –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É —Å–Ω–æ–≤–∞."
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

            connection.commit()
            cursor.close()
            connection.close()


def main() -> None:
    try:
        application = (
            Application.builder()
            .token(os.getenv('BOT_TOKEN'))
            .read_timeout(30)
            .write_timeout(30)
            .build()
        )

        broadcast_conv = ConversationHandler(
            entry_points=[
                MessageHandler(filters.Regex("^üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã$"), tutor_broadcast_entry),
                MessageHandler(filters.Regex("^üì¢ –†–∞—Å—Å—ã–ª–∫–∞$"), choose_broadcast_group)
            ],
            states={
                CHOOSE_GROUP: [MessageHandler(filters.TEXT & ~filters.COMMAND, group_chosen)],
                BROADCAST_MESSAGE: [MessageHandler(filters.ALL, send_broadcast)]
            },
            fallbacks=[CommandHandler('cancel', cancel)]
        )

        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', start)],
            states={
                FULL_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_full_name)],
                CONFIRM_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_name)],
                PHONE_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_phone_number)],
                TUTOR_CODE_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_tutor_code)],
                TUTOR_AUTH: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_tutor_auth)],
                SKS_PHOTO: [MessageHandler(filters.PHOTO, handle_sks_photo)],
                MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu)],
                BROADCAST_MESSAGE: [MessageHandler(filters.ALL, send_broadcast)]  # ‚Üê –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
            },
            fallbacks=[CommandHandler('cancel', cancel)]
        )

        application.add_handler(conv_handler)
        application.add_handler(CommandHandler("menu", menu_command))
        application.add_handler(CommandHandler("code", code_command))
        application.add_handler(CommandHandler("stats", stats_command))
        application.add_handler(CommandHandler("setpoints", set_points_command))
        application.add_handler(CommandHandler("info", info_command))
        application.add_handler(broadcast_conv)
        application.add_handler(CallbackQueryHandler(button_handler))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu))

        application.run_polling(allowed_updates=Update.ALL_TYPES)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main()